import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, CanMatch, NavigationExtras, Route, Router, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';
import { NavigationCommandsFn, NavigationExtrasFn, NgxPermissionsRouterData, NgxRedirectToNavigationParameters, RedirectTo, RedirectToFn } from '../model/permissions-router-data.model';
import { NgxPermissionsService } from '../service/permissions.service';
import { NgxRolesService } from '../service/roles.service';
import * as i0 from "@angular/core";
export interface NgxPermissionsData {
    only?: string | string[];
    except?: string | string[];
    redirectTo?: RedirectTo | RedirectToFn;
}
export declare class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild, CanMatch {
    private permissionsService;
    private rolesService;
    private router;
    constructor(permissionsService: NgxPermissionsService, rolesService: NgxRolesService, router: Router);
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean;
    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;
    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean>;
    canMatch(route: Route): boolean | Observable<boolean> | Promise<boolean>;
    protected hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): true | Promise<boolean>;
    protected transformPermission(permissions: NgxPermissionsRouterData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): NgxPermissionsData;
    protected isParameterAvailable(permission: string | string[]): boolean;
    protected passingExceptPermissionsValidation(permissions: NgxPermissionsData, route: ActivatedRouteSnapshot | Route, state: RouterStateSnapshot): Promise<boolean>;
    protected redirectToAnotherRoute(permissionRedirectTo: RedirectTo | RedirectToFn, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot, failedPermissionName?: string): void;
    protected isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): object is NgxRedirectToNavigationParameters;
    protected transformNavigationCommands(navigationCommands: any[] | NavigationCommandsFn, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): any[];
    protected transformNavigationExtras(navigationExtras: NavigationExtras | NavigationExtrasFn, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): NavigationExtras;
    protected onlyRedirectCheck(permissions: NgxPermissionsData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean>;
    protected handleRedirectOfFailedPermission(permissions: NgxPermissionsData, failedPermission: string, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): void;
    protected isFailedPermissionPropertyOfRedirectTo(permissions: NgxPermissionsData, failedPermission: string): boolean;
    protected checkOnlyPermissions(purePermissions: NgxPermissionsData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean>;
    protected passingOnlyPermissionsValidation(permissions: NgxPermissionsData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxPermissionsGuard, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgxPermissionsGuard>;
}
