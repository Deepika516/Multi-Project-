/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, Input, Output, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, Subject, BehaviorSubject, from, combineLatest, animationFrameScheduler, EMPTY } from 'rxjs';
import { startWith, switchMap, takeUntil, filter, map, finalize, take, observeOn } from 'rxjs/operators';
import { NbAdjustment, NbPosition, } from '../cdk/overlay/overlay-position';
import { NbPortalDirective } from '../cdk/overlay/mapping';
import { NbTrigger } from '../cdk/overlay/overlay-trigger';
import { ENTER, ESCAPE } from '../cdk/keycodes/keycodes';
import { NB_DOCUMENT } from '../../theme.options';
import { NbOptionComponent } from '../option/option.component';
import { convertToBoolProperty } from '../helpers';
import { NB_SELECT_INJECTION_TOKEN } from '../select/select-injection-tokens';
import { NbFormFieldControl, NbFormFieldControlConfig } from '../form-field/form-field-control';
import { nbSelectFormFieldControlConfigFactory, NbSelectLabelComponent, } from '../select/select.component';
import * as i0 from "@angular/core";
import * as i1 from "../cdk/overlay/overlay-service";
import * as i2 from "../cdk/overlay/overlay-position";
import * as i3 from "../cdk/overlay/overlay-trigger";
import * as i4 from "../cdk/a11y/focus-key-manager";
import * as i5 from "../cdk/a11y/a11y.module";
import * as i6 from "../../services/status.service";
import * as i7 from "../cdk/a11y/descendant-key-manager";
import * as i8 from "@angular/common";
import * as i9 from "../cdk/overlay/mapping";
import * as i10 from "../input/input.directive";
import * as i11 from "../icon/icon.component";
import * as i12 from "../option/option-list.component";
import * as i13 from "../form-field/form-field.component";
import * as i14 from "../form-field/suffix.directive";
/**
 * Experimental component with autocomplete possibility.
 * Could be changed without any prior notice.
 * Use at your own risk.
 *
 * Style variables is fully inherited.
 * Component's public API (`@Input()` and `@Output()`) works in a same way as NbSelectComponent.
 */
export class NbSelectWithAutocompleteComponent {
    /**
     * Specifies width (in pixels) to be set on `nb-option`s container (`nb-option-list`)
     * */
    get optionsWidth() {
        return this._optionsWidth ?? this.hostWidth;
    }
    set optionsWidth(value) {
        this._optionsWidth = value;
    }
    /**
     * Adds `outline` styles
     */
    get outline() {
        return this.appearance === 'outline';
    }
    set outline(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'outline';
        }
    }
    /**
     * Adds `filled` styles
     */
    get filled() {
        return this.appearance === 'filled';
    }
    set filled(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'filled';
        }
    }
    /**
     * Adds `hero` styles
     */
    get hero() {
        return this.appearance === 'hero';
    }
    set hero(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'hero';
        }
    }
    /**
     * Disables the select
     */
    get disabled() {
        return !!this._disabled;
    }
    set disabled(value) {
        this._disabled = convertToBoolProperty(value);
    }
    /**
     * If set element will fill its container
     */
    get fullWidth() {
        return this._fullWidth;
    }
    set fullWidth(value) {
        this._fullWidth = convertToBoolProperty(value);
    }
    /**
     * A function to compare option value with selected value.
     * By default, values are compared with strict equality (`===`).
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        if (typeof fn !== 'function') {
            return;
        }
        this._compareWith = fn;
        if (this.selectionModel.length && this.canSelectValue()) {
            this.setSelection(this.selected);
        }
    }
    /**
     * Accepts selected item or array of selected items.
     * */
    set selected(value) {
        this.writeValue(value);
    }
    get selected() {
        return this.multiple ? this.selectionModel.map((o) => o.value) : this.selectionModel[0].value;
    }
    /**
     * Gives capability just write `multiple` over the element.
     * */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = convertToBoolProperty(value);
        this.updatePositionStrategy();
        this.updateCurrentKeyManager();
    }
    /**
     * Experimental input.
     * Could be changed without any prior notice.
     * Use at your own risk.
     *
     * It replaces the button with input when the select is opened.
     * That replacement provides a very basic API to implement options filtering functionality.
     * Filtering itself isn't implemented inside select.
     * So it should be implemented by the user.
     */
    set withOptionsAutocomplete(value) {
        this._withOptionsAutocomplete = convertToBoolProperty(value);
        this.updatePositionStrategy();
        this.updateCurrentKeyManager();
        if (!value) {
            this.resetAutocompleteInput();
        }
    }
    get withOptionsAutocomplete() {
        return this._withOptionsAutocomplete;
    }
    get additionalClasses() {
        if (this.statusService.isCustomStatus(this.status)) {
            return [this.statusService.getStatusClass(this.status)];
        }
        return [];
    }
    /**
     * Determines is select opened.
     * */
    get isOpen() {
        return this.ref && this.ref.hasAttached();
    }
    get isOptionsAutocompleteAllowed() {
        return this.withOptionsAutocomplete && !this.multiple;
    }
    get isOptionsAutocompleteInputShown() {
        return this.isOptionsAutocompleteAllowed && this.isOpen;
    }
    constructor(document, overlay, hostRef, positionBuilder, triggerStrategyBuilder, cd, focusKeyManagerFactoryService, focusMonitor, renderer, zone, statusService, activeDescendantKeyManagerFactoryService) {
        this.document = document;
        this.overlay = overlay;
        this.hostRef = hostRef;
        this.positionBuilder = positionBuilder;
        this.triggerStrategyBuilder = triggerStrategyBuilder;
        this.cd = cd;
        this.focusKeyManagerFactoryService = focusKeyManagerFactoryService;
        this.focusMonitor = focusMonitor;
        this.renderer = renderer;
        this.zone = zone;
        this.statusService = statusService;
        this.activeDescendantKeyManagerFactoryService = activeDescendantKeyManagerFactoryService;
        /**
         * Select size, available sizes:
         * `tiny`, `small`, `medium` (default), `large`, `giant`
         */
        this.size = 'medium';
        /**
         * Select status (adds specific styles):
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
         */
        this.status = 'basic';
        /**
         * Select shapes: `rectangle` (default), `round`, `semi-round`
         */
        this.shape = 'rectangle';
        /**
         * Select appearances: `outline` (default), `filled`, `hero`
         */
        this.appearance = 'outline';
        this._fullWidth = false;
        /**
         * Renders select placeholder if nothing selected.
         * */
        this.placeholder = '';
        this._compareWith = (v1, v2) => v1 === v2;
        this._multiple = false;
        /**
         * Determines options overlay offset (in pixels).
         **/
        this.optionsOverlayOffset = 8;
        /**
         * Determines options overlay scroll strategy.
         **/
        this.scrollStrategy = 'block';
        this._withOptionsAutocomplete = false;
        /**
         * Will be emitted when selected value changes.
         * */
        this.selectedChange = new EventEmitter();
        this.selectOpen = new EventEmitter();
        this.selectClose = new EventEmitter();
        this.optionsAutocompleteInputChange = new EventEmitter();
        /**
         * List of selected options.
         * */
        this.selectionModel = [];
        this.positionStrategy$ = new BehaviorSubject(undefined);
        /**
         * Current overlay position because of we have to toggle overlayPosition
         * in [ngClass] direction and this directive can use only string.
         */
        this.overlayPosition = '';
        this.alive = true;
        this.destroy$ = new Subject();
        /**
         * Function passed through control value accessor to propagate changes.
         * */
        this.onChange = () => { };
        this.onTouched = () => { };
        /*
         * @docs-private
         **/
        this.status$ = new BehaviorSubject(this.status);
        /*
         * @docs-private
         **/
        this.size$ = new BehaviorSubject(this.size);
        /*
         * @docs-private
         **/
        this.focused$ = new BehaviorSubject(false);
        /*
         * @docs-private
         **/
        this.disabled$ = new BehaviorSubject(this.disabled);
        /*
         * @docs-private
         **/
        this.fullWidth$ = new BehaviorSubject(this.fullWidth);
        this.lastShownButtonWidth = undefined;
    }
    /**
     * Determines is select hidden.
     * */
    get isHidden() {
        return !this.isOpen;
    }
    /**
     * Returns width of the select button.
     * */
    get hostWidth() {
        if (this.isOptionsAutocompleteInputShown) {
            return this.optionsAutocompleteInput.nativeElement.getBoundingClientRect().width;
        }
        return this.button.nativeElement.getBoundingClientRect().width;
    }
    get selectButtonClasses() {
        const classes = [];
        if (!this.selectionModel.length) {
            classes.push('placeholder');
        }
        if (!this.selectionModel.length && !this.placeholder) {
            classes.push('empty');
        }
        if (this.isOpen) {
            classes.push(this.overlayPosition);
        }
        return classes;
    }
    /**
     * Content rendered in the label.
     * */
    get selectionView() {
        if (this.selectionModel.length > 1) {
            return this.selectionModel.map((option) => option.content).join(', ');
        }
        return this.selectionModel[0]?.content?.trim() ?? '';
    }
    ngOnChanges({ disabled, status, size, fullWidth }) {
        if (disabled) {
            this.disabled$.next(disabled.currentValue);
        }
        if (status) {
            this.status$.next(status.currentValue);
        }
        if (size) {
            this.size$.next(size.currentValue);
        }
        if (fullWidth) {
            this.fullWidth$.next(this.fullWidth);
        }
    }
    ngAfterContentInit() {
        this.options.changes
            .pipe(startWith(this.options), filter(() => this.queue != null && this.canSelectValue()), 
        // Call 'writeValue' when current change detection run is finished.
        // When writing is finished, change detection starts again, since
        // microtasks queue is empty.
        // Prevents ExpressionChangedAfterItHasBeenCheckedError.
        switchMap((options) => from(Promise.resolve(options))), takeUntil(this.destroy$))
            .subscribe(() => this.writeValue(this.queue));
    }
    ngAfterViewInit() {
        this.triggerStrategy = this.createTriggerStrategy();
        this.subscribeOnButtonFocus();
        this.subscribeOnTriggers();
        this.subscribeOnOptionClick();
        // TODO: #2254
        this.zone.runOutsideAngular(() => setTimeout(() => {
            this.renderer.addClass(this.hostRef.nativeElement, 'nb-transition');
        }));
    }
    ngOnDestroy() {
        this.alive = false;
        this.destroy$.next();
        this.destroy$.complete();
        if (this.ref) {
            this.ref.dispose();
        }
        if (this.triggerStrategy) {
            this.triggerStrategy.destroy();
        }
    }
    onAutocompleteInputChange(event) {
        this.optionsAutocompleteInputChange.emit(event.target.value);
    }
    show() {
        if (this.shouldShow()) {
            this.lastShownButtonWidth = this.hostWidth;
            this.attachToOverlay();
            this.positionStrategy$
                .pipe(switchMap((positionStrategy) => positionStrategy.positionChange ?? EMPTY), take(1), takeUntil(this.destroy$))
                .subscribe(() => {
                if (this.isOptionsAutocompleteInputShown) {
                    this.optionsAutocompleteInput.nativeElement.focus();
                }
                this.setActiveOption();
            });
            this.selectOpen.emit();
            this.cd.markForCheck();
        }
    }
    hide() {
        if (this.isOpen) {
            this.ref.detach();
            this.cd.markForCheck();
            this.selectClose.emit();
            this.resetAutocompleteInput();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    writeValue(value) {
        if (!this.alive) {
            return;
        }
        if (this.canSelectValue()) {
            this.setSelection(value);
            if (this.selectionModel.length) {
                this.queue = null;
            }
        }
        else {
            this.queue = value;
        }
    }
    /**
     * Selects option or clear all selected options if value is null.
     * */
    handleOptionClick(option) {
        this.queue = null;
        if (option.value == null) {
            this.reset();
        }
        else {
            this.selectOption(option);
        }
        this.cd.markForCheck();
    }
    /**
     * Deselect all selected options.
     * */
    reset() {
        this.selectionModel.forEach((option) => option.deselect());
        this.selectionModel = [];
        this.hide();
        this.focusButton();
        this.emitSelected(this.multiple ? [] : null);
    }
    /**
     * Determines how to select option as multiple or single.
     * */
    selectOption(option) {
        if (this.multiple) {
            this.handleMultipleSelect(option);
        }
        else {
            this.handleSingleSelect(option);
        }
    }
    /**
     * Select single option.
     * */
    handleSingleSelect(option) {
        const selected = this.selectionModel.pop();
        if (selected && !this._compareWith(selected.value, option.value)) {
            selected.deselect();
        }
        this.selectionModel = [option];
        option.select();
        this.hide();
        this.focusButton();
        this.emitSelected(option.value);
    }
    /**
     * Select for multiple options.
     * */
    handleMultipleSelect(option) {
        if (option.selected) {
            this.selectionModel = this.selectionModel.filter((s) => !this._compareWith(s.value, option.value));
            option.deselect();
        }
        else {
            this.selectionModel.push(option);
            option.select();
        }
        this.emitSelected(this.selectionModel.map((opt) => opt.value));
    }
    attachToOverlay() {
        if (!this.ref) {
            this.createOverlay();
            this.subscribeOnPositionChange();
            this.createKeyManager();
            this.subscribeOnOverlayKeys();
            this.subscribeOnOptionsAutocompleteChange();
        }
        this.ref.attach(this.portal);
    }
    setActiveOption() {
        if (this.selectionModel.length && !this.selectionModel[0].hidden) {
            this.currentKeyManager?.setActiveItem(this.selectionModel[0]);
        }
        else {
            this.currentKeyManager?.setFirstItemActive();
        }
    }
    createOverlay() {
        const scrollStrategy = this.createScrollStrategy();
        this.positionStrategy$.next(this.createPositionStrategy());
        this.ref = this.overlay.create({
            positionStrategy: this.positionStrategy$.value,
            scrollStrategy,
            panelClass: this.optionsPanelClass,
        });
    }
    createKeyManager() {
        this.activeDescendantKeyManager = this.activeDescendantKeyManagerFactoryService
            .create(this.options)
            .skipPredicate((option) => {
            return this.isOptionHidden(option);
        });
        this.focusKeyManager = this.focusKeyManagerFactoryService
            .create(this.options)
            .withTypeAhead(200)
            .skipPredicate((option) => {
            return this.isOptionHidden(option);
        });
        this.updateCurrentKeyManager();
    }
    updateCurrentKeyManager() {
        this.currentKeyManager?.setActiveItem(-1);
        if (this.isOptionsAutocompleteAllowed) {
            this.currentKeyManager = this.activeDescendantKeyManager;
        }
        else {
            this.currentKeyManager = this.focusKeyManager;
        }
        this.setActiveOption();
    }
    resetAutocompleteInput() {
        if (this.optionsAutocompleteInput?.nativeElement) {
            this.optionsAutocompleteInput.nativeElement.value = this.selectionView;
            this.optionsAutocompleteInputChange.emit('');
        }
    }
    createPositionStrategy() {
        const element = this.isOptionsAutocompleteAllowed
            ? this.optionsAutocompleteInput
            : this.button;
        return this.positionBuilder
            .connectedTo(element)
            .position(NbPosition.BOTTOM)
            .offset(this.optionsOverlayOffset)
            .adjustment(NbAdjustment.VERTICAL);
    }
    updatePositionStrategy() {
        if (this.ref) {
            this.positionStrategy$.next(this.createPositionStrategy());
            this.ref.updatePositionStrategy(this.positionStrategy$.value);
            if (this.isOpen) {
                this.ref.updatePosition();
            }
        }
    }
    createScrollStrategy() {
        return this.overlay.scrollStrategies[this.scrollStrategy]();
    }
    createTriggerStrategy() {
        return this.triggerStrategyBuilder
            .trigger(NbTrigger.CLICK)
            .host(this.hostRef.nativeElement)
            .container(() => this.getContainer())
            .build();
    }
    subscribeOnTriggers() {
        this.triggerStrategy.show$.subscribe(() => this.show());
        this.triggerStrategy.hide$.pipe(filter(() => this.isOpen)).subscribe(($event) => {
            this.hide();
            if (!this.isClickedWithinComponent($event)) {
                this.onTouched();
            }
        });
    }
    subscribeOnPositionChange() {
        this.positionStrategy$
            .pipe(switchMap((positionStrategy) => positionStrategy.positionChange ?? EMPTY), takeUntil(this.destroy$))
            .subscribe((position) => {
            this.overlayPosition = position;
            this.cd.detectChanges();
        });
    }
    subscribeOnOptionClick() {
        /**
         * If the user changes provided options list in the runtime we have to handle this
         * and resubscribe on options selection changes event.
         * Otherwise, the user will not be able to select new options.
         * */
        this.options.changes
            .pipe(startWith(this.options), switchMap((options) => {
            return merge(...options.map((option) => option.click));
        }), takeUntil(this.destroy$))
            .subscribe((clickedOption) => this.handleOptionClick(clickedOption));
    }
    subscribeOnOverlayKeys() {
        this.ref
            .keydownEvents()
            .pipe(filter(() => this.isOpen), takeUntil(this.destroy$))
            .subscribe((event) => {
            if (event.keyCode === ESCAPE) {
                this.hide();
                this.focusButton();
            }
            else if (event.keyCode === ENTER && this.isOptionsAutocompleteInputShown) {
                event.preventDefault();
                const activeItem = this.currentKeyManager.activeItem;
                if (activeItem) {
                    this.selectOption(activeItem);
                }
            }
            else {
                this.currentKeyManager.onKeydown(event);
            }
        });
        merge(this.focusKeyManager.tabOut.pipe(filter(() => !this.isOptionsAutocompleteInputShown)), this.activeDescendantKeyManager.tabOut.pipe(filter(() => this.isOptionsAutocompleteInputShown)))
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.hide();
            this.onTouched();
        });
    }
    subscribeOnOptionsAutocompleteChange() {
        this.optionsAutocompleteInputChange
            .pipe(observeOn(animationFrameScheduler), filter(() => this.isOptionsAutocompleteInputShown), takeUntil(this.destroy$))
            .subscribe(() => {
            if (this.isOptionHidden(this.currentKeyManager.activeItem)) {
                this.currentKeyManager.setFirstItemActive();
            }
        });
    }
    subscribeOnButtonFocus() {
        const buttonFocus$ = this.focusMonitor.monitor(this.button).pipe(map((origin) => !!origin), startWith(false), finalize(() => this.focusMonitor.stopMonitoring(this.button)));
        const filterInputFocus$ = this.focusMonitor.monitor(this.optionsAutocompleteInput).pipe(map((origin) => !!origin), startWith(false), finalize(() => this.focusMonitor.stopMonitoring(this.button)));
        combineLatest([buttonFocus$, filterInputFocus$])
            .pipe(map(([buttonFocus, filterInputFocus]) => buttonFocus || filterInputFocus), takeUntil(this.destroy$))
            .subscribe(this.focused$);
    }
    getContainer() {
        return (this.ref &&
            this.ref.hasAttached() &&
            {
                location: {
                    nativeElement: this.ref.overlayElement,
                },
            });
    }
    focusButton() {
        /**
         * Need to wrap with setTimeout
         * because otherwise focus could be called
         * when the component hasn't rerendered the button
         * which was hidden by `isOptionsAutocompleteInputShown` property.
         */
        setTimeout(() => {
            this.button?.nativeElement?.focus();
        });
    }
    /**
     * Propagate selected value.
     * */
    emitSelected(selected) {
        this.onChange(selected);
        this.selectedChange.emit(selected);
    }
    /**
     * Set selected value in model.
     * */
    setSelection(value) {
        const isResetValue = value == null;
        let safeValue = value;
        if (this.multiple) {
            safeValue = value ?? [];
        }
        const isArray = Array.isArray(safeValue);
        if (this.multiple && !isArray && !isResetValue) {
            throw new Error("Can't assign single value if select is marked as multiple");
        }
        if (!this.multiple && isArray) {
            throw new Error("Can't assign array if select is not marked as multiple");
        }
        const previouslySelectedOptions = this.selectionModel;
        this.selectionModel = [];
        if (this.multiple) {
            safeValue.forEach((option) => this.selectValue(option));
        }
        else {
            this.selectValue(safeValue);
        }
        // find options which were selected before and trigger deselect
        previouslySelectedOptions
            .filter((option) => !this.selectionModel.includes(option))
            .forEach((option) => option.deselect());
        this.cd.markForCheck();
    }
    /**
     * Selects value.
     * */
    selectValue(value) {
        if (value == null) {
            return;
        }
        const corresponding = this.options.find((option) => this._compareWith(option.value, value));
        if (corresponding) {
            corresponding.select();
            this.selectionModel.push(corresponding);
        }
    }
    shouldShow() {
        return this.isHidden && this.options?.length > 0;
    }
    /**
     * Sets touched if focus moved outside of button and overlay,
     * ignoring the case when focus moved to options overlay.
     */
    trySetTouched() {
        if (this.isHidden) {
            this.onTouched();
        }
    }
    isClickedWithinComponent($event) {
        return this.hostRef.nativeElement === $event.target || this.hostRef.nativeElement.contains($event.target);
    }
    canSelectValue() {
        return !!(this.options && this.options.length);
    }
    isOptionHidden(option) {
        return option.hidden;
    }
    get tiny() {
        return this.size === 'tiny';
    }
    get small() {
        return this.size === 'small';
    }
    get medium() {
        return this.size === 'medium';
    }
    get large() {
        return this.size === 'large';
    }
    get giant() {
        return this.size === 'giant';
    }
    get primary() {
        return this.status === 'primary';
    }
    get info() {
        return this.status === 'info';
    }
    get success() {
        return this.status === 'success';
    }
    get warning() {
        return this.status === 'warning';
    }
    get danger() {
        return this.status === 'danger';
    }
    get basic() {
        return this.status === 'basic';
    }
    get control() {
        return this.status === 'control';
    }
    get rectangle() {
        return this.shape === 'rectangle';
    }
    get round() {
        return this.shape === 'round';
    }
    get semiRound() {
        return this.shape === 'semi-round';
    }
}
NbSelectWithAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbSelectWithAutocompleteComponent, deps: [{ token: NB_DOCUMENT }, { token: i1.NbOverlayService }, { token: i0.ElementRef }, { token: i2.NbPositionBuilderService }, { token: i3.NbTriggerStrategyBuilderService }, { token: i0.ChangeDetectorRef }, { token: i4.NbFocusKeyManagerFactoryService }, { token: i5.NbFocusMonitor }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: i6.NbStatusService }, { token: i7.NbActiveDescendantKeyManagerFactoryService }], target: i0.ɵɵFactoryTarget.Component });
NbSelectWithAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbSelectWithAutocompleteComponent, selector: "nb-select-with-autocomplete", inputs: { size: "size", status: "status", shape: "shape", appearance: "appearance", optionsListClass: "optionsListClass", optionsPanelClass: "optionsPanelClass", optionsWidth: "optionsWidth", outline: "outline", filled: "filled", hero: "hero", disabled: "disabled", fullWidth: "fullWidth", placeholder: "placeholder", compareWith: "compareWith", selected: "selected", multiple: "multiple", optionsOverlayOffset: "optionsOverlayOffset", scrollStrategy: "scrollStrategy", withOptionsAutocomplete: "withOptionsAutocomplete" }, outputs: { selectedChange: "selectedChange", selectOpen: "selectOpen", selectClose: "selectClose", optionsAutocompleteInputChange: "optionsAutocompleteInputChange" }, host: { properties: { "class.appearance-outline": "this.outline", "class.appearance-filled": "this.filled", "class.appearance-hero": "this.hero", "class.full-width": "this.fullWidth", "class": "this.additionalClasses", "class.open": "this.isOpen", "class.size-tiny": "this.tiny", "class.size-small": "this.small", "class.size-medium": "this.medium", "class.size-large": "this.large", "class.size-giant": "this.giant", "class.status-primary": "this.primary", "class.status-info": "this.info", "class.status-success": "this.success", "class.status-warning": "this.warning", "class.status-danger": "this.danger", "class.status-basic": "this.basic", "class.status-control": "this.control", "class.shape-rectangle": "this.rectangle", "class.shape-round": "this.round", "class.shape-semi-round": "this.semiRound" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NbSelectWithAutocompleteComponent),
            multi: true,
        },
        { provide: NB_SELECT_INJECTION_TOKEN, useExisting: NbSelectWithAutocompleteComponent },
        { provide: NbFormFieldControl, useExisting: NbSelectWithAutocompleteComponent },
        { provide: NbFormFieldControlConfig, useFactory: nbSelectFormFieldControlConfigFactory },
    ], queries: [{ propertyName: "customLabel", first: true, predicate: NbSelectLabelComponent, descendants: true }, { propertyName: "options", predicate: NbOptionComponent, descendants: true }], viewQueries: [{ propertyName: "portal", first: true, predicate: NbPortalDirective, descendants: true }, { propertyName: "button", first: true, predicate: ["selectButton"], descendants: true, read: ElementRef }, { propertyName: "optionsAutocompleteInput", first: true, predicate: ["optionsAutocompleteInput"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: "<button\n  [hidden]=\"isOptionsAutocompleteInputShown\"\n  [disabled]=\"disabled\"\n  [ngClass]=\"selectButtonClasses\"\n  (blur)=\"trySetTouched()\"\n  (keydown.arrowDown)=\"show()\"\n  (keydown.arrowUp)=\"show()\"\n  class=\"select-button\"\n  type=\"button\"\n  #selectButton\n>\n  <span (click)=\"disabled && $event.stopPropagation()\">\n    <ng-container *ngIf=\"selectionModel.length; else placeholderTemplate\">\n      <ng-container *ngIf=\"customLabel; else defaultSelectionTemplate\">\n        <ng-content select=\"nb-select-label\"></ng-content>\n      </ng-container>\n\n      <ng-template #defaultSelectionTemplate>{{ selectionView }}</ng-template>\n    </ng-container>\n\n    <ng-template #placeholderTemplate>{{ placeholder }}</ng-template>\n  </span>\n\n  <nb-icon\n    icon=\"chevron-down-outline\"\n    pack=\"nebular-essentials\"\n    (click)=\"disabled && $event.stopPropagation()\"\n    aria-hidden=\"true\"\n  >\n  </nb-icon>\n</button>\n\n<nb-form-field [hidden]=\"!isOptionsAutocompleteInputShown\">\n  <input\n    nbInput\n    fullWidth\n    [style.max-width.px]=\"lastShownButtonWidth\"\n    #optionsAutocompleteInput\n    [value]=\"selectionView\"\n    [placeholder]=\"placeholder\"\n    [status]=\"status\"\n    [shape]=\"shape\"\n    [fieldSize]=\"size\"\n    (blur)=\"trySetTouched()\"\n    (click)=\"$event.stopPropagation()\"\n    (dblclick)=\"$event.stopPropagation()\"\n    (input)=\"onAutocompleteInputChange($event)\"\n  />\n  <nb-icon nbSuffix icon=\"chevron-up-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"> </nb-icon>\n</nb-form-field>\n\n<nb-option-list\n  *nbPortal\n  [size]=\"size\"\n  [position]=\"overlayPosition\"\n  [style.width.px]=\"optionsWidth\"\n  [ngClass]=\"optionsListClass\"\n>\n  <ng-content select=\"nb-option, nb-option-group\"></ng-content>\n</nb-option-list>\n", styles: ["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *//*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{display:inline-block;max-width:100%}[dir=ltr] :host .select-button{text-align:left}[dir=ltr] :host .select-button nb-icon{right:.2em}[dir=rtl] :host .select-button{text-align:right}[dir=rtl] :host .select-button nb-icon{left:.2em}:host(.full-width){width:100%}:host(.nb-transition) .select-button{transition-duration:.15s;transition-property:background-color,border-color,border-radius,box-shadow,color;transition-timing-function:ease-in}.select-button,nb-form-field{position:relative;width:100%;overflow:hidden;text-overflow:ellipsis;text-transform:none;white-space:nowrap}nb-icon:not([nbSuffix]){font-size:1.5em;position:absolute;top:50%;transform:translateY(-50%);transition-duration:.15s;transition-property:transform;transition-timing-function:ease-in}[dir=ltr] nb-icon:not([nbSuffix]){right:.5rem}[dir=rtl] nb-icon:not([nbSuffix]){left:.5rem}:host(.open) nb-icon:not([nbSuffix]){transform:translateY(-50%) rotate(180deg)}\n"], dependencies: [{ kind: "directive", type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i9.NbPortalDirective, selector: "[nbPortal]" }, { kind: "directive", type: i10.NbInputDirective, selector: "input[nbInput],textarea[nbInput]", inputs: ["fieldSize", "status", "shape", "fullWidth"] }, { kind: "component", type: i11.NbIconComponent, selector: "nb-icon", inputs: ["icon", "pack", "options", "status", "config"] }, { kind: "component", type: i12.NbOptionListComponent, selector: "nb-option-list", inputs: ["size", "position"] }, { kind: "component", type: i13.NbFormFieldComponent, selector: "nb-form-field" }, { kind: "directive", type: i14.NbSuffixDirective, selector: "[nbSuffix]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbSelectWithAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nb-select-with-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NbSelectWithAutocompleteComponent),
                            multi: true,
                        },
                        { provide: NB_SELECT_INJECTION_TOKEN, useExisting: NbSelectWithAutocompleteComponent },
                        { provide: NbFormFieldControl, useExisting: NbSelectWithAutocompleteComponent },
                        { provide: NbFormFieldControlConfig, useFactory: nbSelectFormFieldControlConfigFactory },
                    ], template: "<button\n  [hidden]=\"isOptionsAutocompleteInputShown\"\n  [disabled]=\"disabled\"\n  [ngClass]=\"selectButtonClasses\"\n  (blur)=\"trySetTouched()\"\n  (keydown.arrowDown)=\"show()\"\n  (keydown.arrowUp)=\"show()\"\n  class=\"select-button\"\n  type=\"button\"\n  #selectButton\n>\n  <span (click)=\"disabled && $event.stopPropagation()\">\n    <ng-container *ngIf=\"selectionModel.length; else placeholderTemplate\">\n      <ng-container *ngIf=\"customLabel; else defaultSelectionTemplate\">\n        <ng-content select=\"nb-select-label\"></ng-content>\n      </ng-container>\n\n      <ng-template #defaultSelectionTemplate>{{ selectionView }}</ng-template>\n    </ng-container>\n\n    <ng-template #placeholderTemplate>{{ placeholder }}</ng-template>\n  </span>\n\n  <nb-icon\n    icon=\"chevron-down-outline\"\n    pack=\"nebular-essentials\"\n    (click)=\"disabled && $event.stopPropagation()\"\n    aria-hidden=\"true\"\n  >\n  </nb-icon>\n</button>\n\n<nb-form-field [hidden]=\"!isOptionsAutocompleteInputShown\">\n  <input\n    nbInput\n    fullWidth\n    [style.max-width.px]=\"lastShownButtonWidth\"\n    #optionsAutocompleteInput\n    [value]=\"selectionView\"\n    [placeholder]=\"placeholder\"\n    [status]=\"status\"\n    [shape]=\"shape\"\n    [fieldSize]=\"size\"\n    (blur)=\"trySetTouched()\"\n    (click)=\"$event.stopPropagation()\"\n    (dblclick)=\"$event.stopPropagation()\"\n    (input)=\"onAutocompleteInputChange($event)\"\n  />\n  <nb-icon nbSuffix icon=\"chevron-up-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"> </nb-icon>\n</nb-form-field>\n\n<nb-option-list\n  *nbPortal\n  [size]=\"size\"\n  [position]=\"overlayPosition\"\n  [style.width.px]=\"optionsWidth\"\n  [ngClass]=\"optionsListClass\"\n>\n  <ng-content select=\"nb-option, nb-option-group\"></ng-content>\n</nb-option-list>\n", styles: ["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *//*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{display:inline-block;max-width:100%}[dir=ltr] :host .select-button{text-align:left}[dir=ltr] :host .select-button nb-icon{right:.2em}[dir=rtl] :host .select-button{text-align:right}[dir=rtl] :host .select-button nb-icon{left:.2em}:host(.full-width){width:100%}:host(.nb-transition) .select-button{transition-duration:.15s;transition-property:background-color,border-color,border-radius,box-shadow,color;transition-timing-function:ease-in}.select-button,nb-form-field{position:relative;width:100%;overflow:hidden;text-overflow:ellipsis;text-transform:none;white-space:nowrap}nb-icon:not([nbSuffix]){font-size:1.5em;position:absolute;top:50%;transform:translateY(-50%);transition-duration:.15s;transition-property:transform;transition-timing-function:ease-in}[dir=ltr] nb-icon:not([nbSuffix]){right:.5rem}[dir=rtl] nb-icon:not([nbSuffix]){left:.5rem}:host(.open) nb-icon:not([nbSuffix]){transform:translateY(-50%) rotate(180deg)}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_DOCUMENT]
                }] }, { type: i1.NbOverlayService }, { type: i0.ElementRef }, { type: i2.NbPositionBuilderService }, { type: i3.NbTriggerStrategyBuilderService }, { type: i0.ChangeDetectorRef }, { type: i4.NbFocusKeyManagerFactoryService }, { type: i5.NbFocusMonitor }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: i6.NbStatusService }, { type: i7.NbActiveDescendantKeyManagerFactoryService }]; }, propDecorators: { size: [{
                type: Input
            }], status: [{
                type: Input
            }], shape: [{
                type: Input
            }], appearance: [{
                type: Input
            }], optionsListClass: [{
                type: Input
            }], optionsPanelClass: [{
                type: Input
            }], optionsWidth: [{
                type: Input
            }], outline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-outline']
            }], filled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-filled']
            }], hero: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-hero']
            }], disabled: [{
                type: Input
            }], fullWidth: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.full-width']
            }], placeholder: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], selected: [{
                type: Input
            }], multiple: [{
                type: Input
            }], optionsOverlayOffset: [{
                type: Input
            }], scrollStrategy: [{
                type: Input
            }], withOptionsAutocomplete: [{
                type: Input
            }], additionalClasses: [{
                type: HostBinding,
                args: ['class']
            }], selectedChange: [{
                type: Output
            }], selectOpen: [{
                type: Output
            }], selectClose: [{
                type: Output
            }], optionsAutocompleteInputChange: [{
                type: Output
            }], options: [{
                type: ContentChildren,
                args: [NbOptionComponent, { descendants: true }]
            }], customLabel: [{
                type: ContentChild,
                args: [NbSelectLabelComponent]
            }], portal: [{
                type: ViewChild,
                args: [NbPortalDirective]
            }], button: [{
                type: ViewChild,
                args: ['selectButton', { read: ElementRef }]
            }], optionsAutocompleteInput: [{
                type: ViewChild,
                args: ['optionsAutocompleteInput', { read: ElementRef }]
            }], isOpen: [{
                type: HostBinding,
                args: ['class.open']
            }], tiny: [{
                type: HostBinding,
                args: ['class.size-tiny']
            }], small: [{
                type: HostBinding,
                args: ['class.size-small']
            }], medium: [{
                type: HostBinding,
                args: ['class.size-medium']
            }], large: [{
                type: HostBinding,
                args: ['class.size-large']
            }], giant: [{
                type: HostBinding,
                args: ['class.size-giant']
            }], primary: [{
                type: HostBinding,
                args: ['class.status-primary']
            }], info: [{
                type: HostBinding,
                args: ['class.status-info']
            }], success: [{
                type: HostBinding,
                args: ['class.status-success']
            }], warning: [{
                type: HostBinding,
                args: ['class.status-warning']
            }], danger: [{
                type: HostBinding,
                args: ['class.status-danger']
            }], basic: [{
                type: HostBinding,
                args: ['class.status-basic']
            }], control: [{
                type: HostBinding,
                args: ['class.status-control']
            }], rectangle: [{
                type: HostBinding,
                args: ['class.shape-rectangle']
            }], round: [{
                type: HostBinding,
                args: ['class.shape-round']
            }], semiRound: [{
                type: HostBinding,
                args: ['class.shape-semi-round']
            }] } });
//# sourceMappingURL=data:application/json;base64,